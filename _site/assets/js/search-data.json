{"0": {
    "doc": "BACS Information",
    "title": "BACS Information",
    "content": " ",
    "url": "/bacs.html",
    
    "relUrl": "/bacs.html"
  },"1": {
    "doc": "BSCS Information",
    "title": "BSCS Information",
    "content": ". | Capstone Information | . ",
    "url": "/bscs.html",
    
    "relUrl": "/bscs.html"
  },"2": {
    "doc": "BSCS Information",
    "title": "Capstone Information",
    "content": "Fourth-Year BSCS students need to do the following: . | Take STS 4500 in the fall and STS 4600 in the spring. | Complete your CS capstone / senior thesis requirement in one of two ways: Option 1) Take 3 credits of CS 4980 (or CS 4993) and write a “significant technical paper” at the end of this course. Whoever you take CS 4980 with will sign off on the paper as being your technical report component for your senior thesis portfolio that you do with STS during 4500 and 4600. Reach out to faculty to see what projects they may have or check out http://research.cs.virginia.edu for ideas! Option 2) Take a 6th CS elective (CS 3000 or higher) -AND- take the 0-credit CS 4991 course. The 6th CS elective will cover your required 3 credits needed for the capstone slot in your SIS Academic Requirements report. CS 4991 is the course in which we track and evaluate a “significant technical paper” that you come up with on your own. This course is pass/fail and you need a pass to graduate. | . Q: How do I come up with my paper topic? A: Here are two prompts to consider: . | Describe an already completed computing experiential learning event ― internship, personal project, non-profit volunteer effort ― that offered documented value to a specific organization, community, or group. If appropriate, indicate how the project could be enhanced or redesigned for increased value. | Propose a synthesis of ideas from two completed CS courses that connects how topic(s) might be enhanced, extended, refined, or reworked. | . Q: Do I have to take CS 4991 in the fall or can I take it in the spring? A: It doesn’t matter which semester you take it. Prof. Vrugtman will take half of the BSCS students who want to do this option this fall and the other half in the spring. If you want to do it in the fall, it may already be full, but you can see if someone wants to drop or swap. Q: I don’t want to do a 6th elective and would prefer research or an independent project. A: Great! You can go to http://ug-research.cs.virginia.edu to see a list of potential projects or ideas. Even if the idea was posted a while ago, if you think it sounds cool, reach out to the professor! They may still be working on that project or have other ideas based on your interests! It never hurts to reach out to our faculty to talk about their research or your project ideas. ",
    "url": "/bscs.html#capstone-information",
    
    "relUrl": "/bscs.html#capstone-information"
  },"3": {
    "doc": "Contact Information",
    "title": "Contact Information",
    "content": " ",
    "url": "/contact.html",
    
    "relUrl": "/contact.html"
  },"4": {
    "doc": "Course Rules",
    "title": "Course Rules",
    "content": " ",
    "url": "/course_rules.html",
    
    "relUrl": "/course_rules.html"
  },"5": {
    "doc": "Course Rules",
    "title": "Course Equivalencies",
    "content": "CS Courses . These CS courses will count for each other in all cases. | CS 2120 == CS 2102 | CS 3100 == CS 4102 | CS 3120 == CS 3102 | . APMA Courses . | APMA 1090 == MATH 1310 | APMA 1110 == MATH 1320 | APMA 2120 == MATH 2310 | APMA 2130 == MATH 3250 | APMA 3080 == MATH 3351 | APMA 3100 == MATH 3100 | APMA 3120 == STAT 3120 | . Other SEAS Courses . | MAE 2300 == CE 2300 | MAE 2310 == CE 2310 | MAE 2320 == CE 2320 | . SEAS Approved Equivalencies outside UVA . https://engineering.virginia.edu/current-students/current-undergraduate-students/transferring-uva-engineering/transfer-credit . ",
    "url": "/course_rules.html#course-equivalencies",
    
    "relUrl": "/course_rules.html#course-equivalencies"
  },"6": {
    "doc": "Home",
    "title": "UVA CS Advising Guide",
    "content": "Site Last Updated: Thursday, January 26, 2023 @ 1:16 PM . ",
    "url": "/#uva-cs-advising-guide",
    
    "relUrl": "/#uva-cs-advising-guide"
  },"7": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "/",
    
    "relUrl": "/"
  },"8": {
    "doc": "Place Out Information",
    "title": "Place Out Tests",
    "content": " ",
    "url": "/placement.html#place-out-tests",
    
    "relUrl": "/placement.html#place-out-tests"
  },"9": {
    "doc": "Place Out Information",
    "title": "CS 1110 Place Out Test",
    "content": "The place out test allows a student to take a course that requires a CS 1 course as a prerequisite, but it does not grant course credit. Place out tests are only available as follows: . One week prior to the beginning of the semester (fall and spring), through the first seven business days of the semester; then again seven business days prior to course registration for the following semester. Typically, this is around the middle of October in the fall semester, and around the last week of March/first week of April in the spring semester. Students who wish to take the place out test can fill out this form to receive a link to the exam. The exam must be submitted within 48 hours of receiving the link. The student is allotted 90 minutes to take the exam, beginning when the exam is first opened. Students cannot use books, notes, computers, or help from other people while taking the exam. A student can only take the exam once, and students who have enrolled in CS 1110 are not allowed to take the place out exam beyond Wednesday of second week of the semester. The exam will be graded within a few days, and the results will be emailed to the student. Students who pass do not receive credit, and if CS 1110 was required as part of a degree program may be required to take some other course at UVA in lieu of CS111X; however, it does meet prerequisites. CS majors are required to take another math/technical course that is not already being counted toward their degree program. Some examples include another APMA course, another CS elective, or a technical course in another SEAS department. The place-out test is made up of several multiple-choice, short answer, and coding questions. Students may use any of the following languages on the test: Java, Python, C++, C, Javascript, or C#. Students interested in taking the test need to be familiar with: . variables (creation and manipulation) functions/methods (creation and usage) how to read and interpret code if / else statements various loop constructs (for, while) string manipulation input and output arrays / lists . CS 2100 Place Out Test Information . Place out tests are only available as follows: . One week prior to the start of each semester (fall and spring), through the first seven business days of the semester; then again two weeks prior to course registration for the following semester; typically, this is around the middle of October in the fall semester, and around the last week of March/first week of April in the spring semester. The place out test for CS 2100 MUST be taken in person, during scheduled times. It is available Monday-Friday at either 9:30am or 1:30pm. The student is allotted 120 minutes to take the test. Students cannot use books, notes, computers, or help from other people while taking the test. A student can only take the test once, and students who have enrolled in CS 2100 are not allowed to take the place out test, beyond the second week of the semester. The test will be graded within a few days, and the results will be emailed to the student. Students who pass do not receive credit. Because CS 2100 is only a prerequisite to the BACS major, students pursuing the BACS major will NOT have to take some other CS Course in lieu of CS 2100. Students pursuing the BSCS major, or CS minor are REQUIRED to take some other CS course at UVA in lieu of CS 2100. Students should use the Java programming language on the test. The place out test is made up of several short-answer, implementation, and coding questions. Students interested in taking the test need to be familiar with: . Data Structures and Algorithms 1 (CS 2100) . University of Virginia . List of Topics . Learning Java . -Hello World Program . -Primitive Data Types and Sizes of Types . -Using Basic Objects from the Java API . -How to read and use the Java API . -Reading in Input . -Writing basic methods, parameter passing, static keyword, public / private, overloading methods . -Strongly Typed Language / Casting . -Arrays . -Exceptions . -If Statements, Switch Statements, For-Loops, For-Each Loops, While Loops, and other control structures, = vs == vs .equals() vs .compareTo(), etc. -References to Objects, passing references as parameters, shared references, etc. -Writing Classes and Enums . -The Java Virtual Machine and how compilation works in Java (high-level…basics). What is a compiler? What does it do? What is a JVM? What does it do? Advantages and Disadvantages. -Using the Basic Data Structures that come with Java API (Most are covered in the respective section on the data structure itself) . Lists, ArrayList, Vector, LinkedList, etc. TreeSet, TreeMap HashSet, HashMap . Lists . -What is a list? . -Abstract Data Types versus implementation of those ADTs . -Using an interface in Java to describe an ADT without specific implementation . -Polymorphism and how interfaces allow for type substitution . -Vector . Array-Based implementation How resizing method works. Size vs. Capacity Insert / Delete / [] operator / etc. Advantages and Disadvantages . -Java Generics and Wildcards . Implementing a Generic Vector **All Data Structure implementations in course are generics Type erasure and instantiating generic arrays in Java . -Linked Lists . Insert, Delete, etc. Iterators Advantages / Disadvantages Java Generic Implementation . -Stacks and Queues . Array-Based Implementations Linked-List bases Implementations Applications . Big-Oh Notation / Analysis . -Formal definition of Big-Oh, Big-Omega, Big-Theta . -Comparing growth rates of functions using this notation . -Complexity Classes . -Common complexity classes (1,n,nlogn, etc.) . -Amortized Time Complexity . Return to Vector insert as an illustrative example . Trees . -Examples solved with trees / example trees . -Recursion . Base cases, making progress towards termination, etc. Recursive implementations of simple methods like printing a list, seeing if a string is a palindrome, towers of Hanoi, etc.. -Using recursion to traverse trees . Pre, in, post-order traversals of trees. -Binary Search Trees . Structure Property Insert, Find, Remove, Find-Max, etc. Generic implementation in Java Ordered Set ADT vs. Binary Search Tree . -AVL Trees . Rotation methods Maintaining balance. Inheritance in Java: Generic Implementation of AVL Tree using inheritance from Binary Search Tree to simplify implementation. -Red-Black Trees . Overview, but not implementation details Example of structure with same complexity (as AVL) but lower constants / overhead . -Examples of solving problems with Trees . Sorting Algorithms . -What is the sorting problem? . -Comparison sorts vs Adjacent Sorts, Java’s Comparable Interface . -Stable, in-place, etc. -Using Collections.sort() or Comparable to sort in Java . -Adjacent Sorts: . Bubble Sort Insertion Sort Lower-Bound Proof on Adjacent Sorts . -Comparison Sorts: . MergeSort QuickSort Nlogn lower-bound argument . -Hybrid Sorts / Other Sorts: . TimSort (Java uses this), Radix Sort, etc. Hash Tables . -Maps vs. Set ADT . -Hash Tables and HashSet / HashMap . Hash functions, HashCode() in java, etc. -Implementation of Hash Table . Array Indexing Hash Functions Collision Resolution Strategies Linear Probing Separate Chaining Quadratic Probing Double Hashing Rehashing Find, Delete, etc. Priority Queues . -Priority Queue ADT . -Binary Heaps . Structure Property, Ordering Property Array Based Representation Peek(), push(), Poll() PercolateUp, percolateDown, Heapify, etc. HeapSort . Basics of Concurrency . -Terminology (process, thread, deadlock, race conditions, etc.) . -Writing simple threads in Java . Runnable, Thread Class, etc. -Interrupting threads . -Exception Handling in Java . In general In the context of thread code . -Shared Resources and Race Conditions . -Basic locks / ideas behind locks . Reentrant lock . -Deadlocks . Avoiding deadlocks, etc. Java condition objects Await(), signalAll(), etc. -Blocking Queue . Implementing a basic concurrent queue in Java . ",
    "url": "/placement.html#cs-1110-place-out-test",
    
    "relUrl": "/placement.html#cs-1110-place-out-test"
  },"10": {
    "doc": "Place Out Information",
    "title": "Place Out Information",
    "content": " ",
    "url": "/placement.html",
    
    "relUrl": "/placement.html"
  },"11": {
    "doc": "UVA Policies",
    "title": "UVA Policies",
    "content": "Links are provided here to relevant UVA policies on class activities. | PROV-005: Recording of Class Sessions and Distribution of Course Materials | . ",
    "url": "/uva_policies.html",
    
    "relUrl": "/uva_policies.html"
  },"12": {
    "doc": "Video Library",
    "title": "Video Library",
    "content": " ",
    "url": "/video_library.html",
    
    "relUrl": "/video_library.html"
  },"13": {
    "doc": "Video Library",
    "title": "BSCS General Information Session",
    "content": " ",
    "url": "/video_library.html#bscs-general-information-session",
    
    "relUrl": "/video_library.html#bscs-general-information-session"
  }
}
